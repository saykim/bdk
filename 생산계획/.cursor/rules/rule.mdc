---
description: 
globs: 
---
## 1. 개요 및 목적

- **목표:**  
  - 빠른 프로토타이핑과 PoC(Proof of Concept)를 위해 복잡한 인프라 없이 기능을 검증한다.  
  - 빠르게 동작하는 데모를 만들고, 필요에 따라 확장 가능하도록 설계한다.

- **주요 기술 스택:**  
  - **FastAPI:** 비동기 기반의 Python 웹 프레임워크로, 신속한 API 개발 및 문서화를 지원함.  
  - **SQLite:** 경량 파일 기반 데이터베이스로, 초기 PoC 및 프로토타입에 적합. (필요 시 Supabase로 전환 고려)  
  - **TailwindCSS:** 빠른 스타일링과 프로토타이핑을 위한 유틸리티 기반 CSS 프레임워크.  
  - **vanilla.js & HTML:** 간단하고 직관적인 프론트엔드 인터랙션 및 마크업 작성.

---

## 2. 설계 원칙 및 전략

### A. 빠른 개발과 PoC 중심 설계

- **최소 구성:**  
  - 필요한 기능만 구현하여 복잡도를 줄인다.  
  - 예비 PoC 단계이므로 “완벽한” 코드보다는 기능 검증에 집중한다.

- **프로토타입-우선 접근:**  
  - 초기에는 SQLite 같은 경량 DB로 신속하게 데이터를 저장하고, 나중에 필요하면 Supabase 등 외부 관리형 DB로 전환할 수 있도록 추상화 계층을 고려한다.
  - API의 상태와 응답을 빠르게 확인할 수 있도록 간단한 Swagger 문서 자동 생성을 활용한다.


3. **에러 처리 및 로깅:**
   - 모든 API 엔드포인트는 입력 검증과 guard clause를 사용해 조기 오류 처리를 구현.
   - HTTPException과 로깅 모듈을 사용해 에러 발생 시 상세 로그를 남기고, 클라이언트에 명확한 메시지를 제공.

4. **비동기 처리 및 서버리스 확장 고려:**
   - API는 async def를 활용해 비동기 I/O 최적화를 기본으로 한다.
   - 초기 PoC에서는 간단한 기능에 집중하되, 추후 확장 시 Redis 캐시, Celery 비동기 작업, API 게이트웨이와의 연동 등 확장성 고려.

5. **프론트엔드 연동:**
   - TailwindCSS를 사용하여 빠른 UI 스타일링과 반응형 디자인을 구현.
   - vanilla.js를 사용해 간단한 클라이언트 사이드 인터랙션(폼 유효성 검사, Ajax 호출 등)을 처리.
   - HTML 템플릿은 FastAPI의 템플릿 렌더링(Jinja2 등)을 활용하여 기본 페이지 구성.